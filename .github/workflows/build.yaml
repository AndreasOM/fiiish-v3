name: ðŸ”¨ Build
run-name: ðŸ”¨ Build ${{ vars.PROJECT }} - ${{ inputs.build_type }} by @${{ github.actor }}

on: 
  workflow_dispatch:
    inputs:
      build_type:
        description: 'The type of build'
        required: true
        default: 'web-demo'
        type: choice
        options:
          - 'web-demo'
          - 'web-classic'
          - 'linux'
          - 'windows'
          - 'macos'
          - 'ios'
          - 'linux-classic'
          - 'windows-classic'
          - 'macos-classic'
          - 'ios-classic'
  workflow_call:
    inputs:
      build_type:
        description: 'The type of build'
        required: true
        type: string
    outputs:
      s3_archive:
        description: "The archive on S3"
        value: ${{ jobs.build.outputs.s3_archive }}          

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      runner: ${{ steps.choose_runner.outputs.runner }}    
    defaults:
      run:
        # Use bash shells on all platforms.
        shell: bash
    steps:
      - name: Choose runner
        id: choose_runner
        run: |
          case ${{ inputs.build_type }} in
            ios*)
              echo "runner=macos-14" >> "$GITHUB_OUTPUT"
              ;;
            macos*)
              echo "runner=macos-14" >> "$GITHUB_OUTPUT"
              ;;
            *)
              echo "runner=ubicloud-standard-4" >> "$GITHUB_OUTPUT"
              ;;
          esac
  build:
    needs: [prepare]
    runs-on: ${{ needs.prepare.outputs.runner }}
    outputs:
      s3_archive: ${{ steps.upload_artifact.outputs.s3_archive }}
    defaults:
      run:
        # Use bash shells on all platforms.
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github
            godot
          fetch-depth: 1
          submodules: true
#          fetch-tags: true # Note: fails when triggered from tag!

      - name: Fetch tags
        run: |
          git fetch origin --tags --force

      - name: Create variables
        run: |
          PROJECT=${{ vars.PROJECT }}
          COMMIT_HASH=$(git rev-parse --short HEAD)
          COMMIT_DATE=$(git show -s --format=%ci HEAD|cut -b1-10)
          BUILD_TYPE=${{ inputs.build_type }}

          case ${{ inputs.build_type }} in
            macos*)
              echo "TARGET=macos" >> "$GITHUB_ENV"
              ;;
            linux*)
              echo "TARGET=linux" >> "$GITHUB_ENV"
              ;;
            windows*)
              echo "TARGET=windows" >> "$GITHUB_ENV"
              ;;
            web*)
              echo "TARGET=web" >> "$GITHUB_ENV"
              ;;
            ios*)
              echo "TARGET=ios" >> "$GITHUB_ENV"
              ;;

            *)
              echo "TARGET=unknown" >> "$GITHUB_ENV"
              ;;
          esac

          case ${{ inputs.build_type }} in
            *-classic)
              echo "BINARY_NAME=fiiish-classic" >> "$GITHUB_ENV"
              echo "LOADINGSCREEN=loadingscreen-classic.webp" >> "$GITHUB_ENV"
              ;;
            *)
              echo "BINARY_NAME=${{ vars.PROJECT }}" >> "$GITHUB_ENV"
              echo "LOADINGSCREEN=loadingscreen.webp" >> "$GITHUB_ENV"
              ;;
          esac


          VERSION=$(git tag --points-at HEAD)
          if [[ ${VERSION} == "" ]]
          then
            echo "NO VERSION -- using v0.0.0"
            VERSION="v0.0.0"
            echo "Contains HEAD"
            git tag -l --contains HEAD
            echo "Points At HEAD"
            git tag --points-at HEAD
            echo "Commit"
            git rev-parse --short HEAD
            echo "Log"
            git log --oneline -n 10
          fi
          if [[ ${VERSION} != v* ]]
          then
            echo "Invalid version. Use vx.y.z was ${VERSION}"
            exit 255
          fi
          VERSION=${VERSION#"v"}
          BUILD_NUMBER=$(date +2025.%y%m%d.%H%M%S)
          ARCHIVE_FILE=${PROJECT}-${BUILD_TYPE}-${COMMIT_DATE}.tgz
          S3_ARCHIVE_FILE=s3://artifacts.omnimad.net/${PROJECT}/${COMMIT_DATE}/${ARCHIVE_FILE}
          LATEST_FILE=${PROJECT}-${BUILD_TYPE}-latest.txt
          S3_LATEST_FILE=s3://artifacts.omnimad.net/${PROJECT}/${LATEST_FILE}
          LATEST_CONTENT=${PROJECT}/${COMMIT_DATE}/${ARCHIVE_FILE}
          {
            echo "PROJECT=${PROJECT}"
            echo "COMMIT_HASH=${COMMIT_HASH}"
            echo "COMMIT_DATE=${COMMIT_DATE}"
            echo "BUILD_TYPE=${BUILD_TYPE}"
            echo "VERSION=${VERSION}"
            echo "BUILD_NUMBER=${BUILD_NUMBER}"
            echo "ARCHIVE_FILE=${ARCHIVE_FILE}"
            echo "S3_ARCHIVE_FILE=${S3_ARCHIVE_FILE}"            
            echo "LATEST_FILE=${LATEST_FILE}"
            echo "S3_LATEST_FILE=${S3_LATEST_FILE}"
            echo "LATEST_CONTENT=${LATEST_CONTENT}"
          } >> "$GITHUB_ENV"

      - name: Set binary extension
        run: |
          case ${{ inputs.build_type }} in
            macos*)
              echo "BINARY_EXTENSION=.app" >> "$GITHUB_ENV"
              ;;
            linux*)
              echo "BINARY_EXTENSION=.x86_64" >> "$GITHUB_ENV"
              ;;
            windows*)
              echo "BINARY_EXTENSION=.exe" >> "$GITHUB_ENV"
              ;;
            'web-demo')
              echo "BINARY_EXTENSION=.html" >> "$GITHUB_ENV"
              ;;
            'web-classic')
              echo "BINARY_EXTENSION=.html" >> "$GITHUB_ENV"
              ;;
            ios*)
              echo "BINARY_EXTENSION=.xcodeproj" >> "$GITHUB_ENV"
              ;;

            *)
              echo "BINARY_EXTENSION=" >> "$GITHUB_ENV"
              ;;
          esac

      - name: Setup Godot
        uses: chickensoft-games/setup-godot@v2
        with:
          version: 4.4.1
          use-dotnet: false
          include-templates: true
      - name: Verify setup
        run: |
          godot --version

      - name: Fix version info
        run: |
          .github/helpers/update_version_info.sh ${{ env.BUILD_TYPE }}

      - name: Install GraphicsMagick
        run: |
          if [[ ${{ needs.prepare.outputs.runner }} == macos-* ]]
          then
            brew install graphicsmagick
          else
            sudo apt -y update
            sudo apt -y install graphicsmagick
          fi

      - name: Bake Version into Splash
        run: |
          LEFT_TEXT=""
          if [[ ${{ env.VERSION }} == "0.0.0" ]]
          then
            LEFT_TEXT="${{ env.COMMIT_HASH }}"
          fi
          RIGHT_TEXT="v${{ env.VERSION }}"
          gm convert \
            -verbose \
            -fill "#2dbac9" \
            -pointsize 72 \
            -font godot/Fonts/all_things_pink.ttf \
            -draw "text 1520,1040 '${RIGHT_TEXT}'" \
            -draw "text 300,1040 '${LEFT_TEXT}'" \
            godot/Textures/Loadingscreen/${{ env.LOADINGSCREEN }} \
            godot/Textures/Loadingscreen/loadingscreen-with-version.png

      - name: Import project
        run: |
          cd godot
          godot \
            --headless \
            --import \
            --editor \
            --quit
          
          # || exit 0

      - name: Export project
        run: |
          cd godot
          mkdir -p export/${{ env.PROJECT }}-${{ env.BUILD_TYPE }}
          godot \
            --headless \
            --export-debug \
            ${{ env.BUILD_TYPE }} \
            export/${{ env.PROJECT }}-${{ env.BUILD_TYPE }}/${{ env.BINARY_NAME }}${{ env.BINARY_EXTENSION }} \
            --quit #

          # || exit 0

# [ --- iOS only ---
      - name: Switch Xcode Version
        if: ${{ env.TARGET == 'ios' }}
        run: |
          sudo xcode-select --switch /Applications/Xcode_16.2.0.app
          xcode-select --print-path

      - name: Patch version
        if: ${{ env.TARGET == 'ios' }}
        run: |
          agvtool new-marketing-version ${{ env.VERSION }}
          agvtool new-version -all ${{ env.BUILD_NUMBER }}

        working-directory: godot/export/${{ env.PROJECT }}-${{ env.BUILD_TYPE }}/

      - name: Build
        if: ${{ env.TARGET == 'ios' }}
        run: |
          xcodebuild \
            -project ${{ env.PROJECT }}-${{ env.BUILD_TYPE }}/${{ env.BINARY_NAME }}${{ env.BINARY_EXTENSION }} \
            -sdk iphoneos \
            -scheme "${{ env.BINARY_NAME }}" \
            -configuration "Release" \
            build CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO

        working-directory: godot/export

      - name: Export Archive
        if: ${{ env.TARGET == 'ios' }}
        run: |
          xcodebuild \
            -archivePath "${{ env.PROJECT }}-${{ env.BUILD_TYPE }}.xcarchive" \
            -project ${{ env.PROJECT }}-${{ env.BUILD_TYPE }}/${{ env.BINARY_NAME }}${{ env.BINARY_EXTENSION }} \
            -sdk iphoneos \
            -scheme "${{ env.BINARY_NAME }}" \
            -configuration "Release" \
            archive CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO

        working-directory: godot/export

      - name: Move Archive into Export
        if: ${{ env.TARGET == 'ios' }}
        run: |
          mv ${{ env.PROJECT }}-${{ env.BUILD_TYPE }} "${{ env.PROJECT }}-${{ env.BUILD_TYPE }}-godot"
          mkdir -p ${{ env.PROJECT }}-${{ env.BUILD_TYPE }}
          mv "${{ env.PROJECT }}-${{ env.BUILD_TYPE }}.xcarchive" "${{ env.PROJECT }}-${{ env.BUILD_TYPE }}"

        working-directory: godot/export


#   --- iOS only --- ]

      - name: Check result
        run: |
          cd godot
          find export

      - name: Add .itch.toml
        continue-on-error: true
        run: |
            cp godot/${{ env.BINARY_NAME }}.itch.toml godot/export/${{ env.PROJECT }}-${{ env.BUILD_TYPE }}/.itch.toml

      - name: Bundle artifact
        run: |
          cd godot/export
          echo ${{ env.VERSION }} > ${{ env.PROJECT }}-${{ env.BUILD_TYPE }}/version.txt
          echo ${{ env.BUILD_NUMBER }} > ${{ env.PROJECT }}-${{ env.BUILD_TYPE }}/build_number.txt
          tar czf ${{ env.ARCHIVE_FILE }} ${{ env.PROJECT }}-${{ env.BUILD_TYPE }}

      - name: Upload artifact
        id: upload_artifact
        run: |
          cd godot/export
          aws s3 cp ${{ env.ARCHIVE_FILE }} ${{ env.S3_ARCHIVE_FILE }}
          echo "s3_archive=${{ env.S3_ARCHIVE_FILE }}" >> "$GITHUB_OUTPUT"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "eu-west-1"

      - name: Create latest reference
        run: |
          echo ${{ env.LATEST_CONTENT }} > ${{ env.LATEST_FILE }}
          aws s3 cp ${{ env.LATEST_FILE }} ${{ env.S3_LATEST_FILE }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "eu-west-1"

      - name: Create Summary
        if: always()
        run: |
          {
            echo "|                     |                                    |"
            echo "| :------------------ | ---------------------------------: |"
            echo "| PROJECT             | ${{ env.PROJECT }}                 |"
            echo "| BUILD_TYPE          | ${{ env.BUILD_TYPE }}              |"
            echo "| COMMIT_HASH         | ${{ env.COMMIT_HASH }}             |"
            echo "| COMMIT_DATE         | ${{ env.COMMIT_DATE }}             |"
            echo "| VERSION             | \`${{ env.VERSION }}\`             |"
            echo "| BUILD_NUMBER        | \`${{ env.BUILD_NUMBER }}\`        |"
            echo "| S3_ARCHIVE_FILE     | \`${{ env.S3_ARCHIVE_FILE }}\`     |"
          } >> "$GITHUB_STEP_SUMMARY"
