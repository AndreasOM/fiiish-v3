name: ðŸ“± iOS - ðŸ”¨ Build
on: 
  workflow_dispatch:
  workflow_call:
  push:
    tags:
      - "v*"
    # We always build on a tag
    # paths:
    #  - godot/**

jobs:
  build:
    runs-on: macos-14
    defaults:
      run:
        # Use bash shells on all platforms.
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github
            godot
          fetch-depth: 1
      - name: Create variables
        run: |
          PROJECT=fiiish-v3
          COMMIT_HASH=$(git rev-parse --short HEAD)
          COMMIT_DATE=$(git show -s --format=%ci HEAD|cut -b1-10)
          ARCHIVE_FILE=fiiish-v3-ios-${COMMIT_DATE}.tgz
          S3_ARCHIVE_FILE=s3://artifacts.omnimad.net/${PROJECT}/${COMMIT_DATE}/${ARCHIVE_FILE}
          BUILD_TYPE="ios"
          BINARY=${PROJECT}.app
          LATEST_FILE=${PROJECT}-${BUILD_TYPE}-latest.txt
          S3_LATEST_FILE=s3://artifacts.omnimad.net/${PROJECT}/${LATEST_FILE}
          LATEST_CONTENT=${PROJECT}/${COMMIT_DATE}/${ARCHIVE_FILE}
          VERSION=$(git tag --points-at HEAD)
          if [[ ${VERSION} == "" ]]
          then
           echo "NO VERSION -- using v0.0.0"
           VERSION="v0.0.0"
          fi
          if [[ ${VERSION} != v* ]]
          then
            echo "Invalid version. Use x.y.z"
            exit 255
          fi
          VERSION=${VERSION#"v"}
          # BUILD_NUMBER=$(date +%Y.%m%d.%H%M%S)
          BUILD_NUMBER=$(date +2025.%y%m%d.%H%M%S)
          # BUILD_NUMBER=$(date +%s.%y%m%d.%H%M%S)
          #
          # put into github env
          #
          {
            echo "PROJECT=${PROJECT}"
            echo "COMMIT_HASH=${COMMIT_HASH}"
            echo "COMMIT_DATE=${COMMIT_DATE}"
            echo "ARCHIVE_FILE=${ARCHIVE_FILE}"
            echo "S3_ARCHIVE_FILE=${S3_ARCHIVE_FILE}"
            echo "BUILD_TYPE=${BUILD_TYPE}"
            echo "BINARY=${BINARY}"
            echo "LATEST_FILE=${LATEST_FILE}"
            echo "S3_LATEST_FILE=${S3_LATEST_FILE}"
            echo "LATEST_CONTENT=${LATEST_CONTENT}"
            echo "VERSION=${VERSION}"
            echo "BUILD_NUMBER=${BUILD_NUMBER}"
          } >> "$GITHUB_ENV"


      - name: Fix version info
        run: |
          .github/helpers/update_version_info.sh ${{ env.BUILD_TYPE }}

      - name: Install GraphicsMagick
        run: |
          brew install graphicsmagick

      - name: Bake Version into Splash
        run: |
          LEFT_TEXT=""
          if [[ ${{ env.VERSION }} == "0.0.0" ]]
          then
            LEFT_TEXT="${{ env.COMMIT_HASH }}"
          fi
          RIGHT_TEXT="v${{ env.VERSION }}"
          gm convert \
            -verbose \
            -fill "#2dbac9" \
            -pointsize 72 \
            -font godot/Fonts/all_things_pink.ttf \
            -draw "text 1520,1040 '${RIGHT_TEXT}'" \
            -draw "text 300,1040 '${LEFT_TEXT}'" \
            godot/Textures/Loadingscreen/loadingscreen.png \
            godot/Textures/Loadingscreen/loadingscreen-with-version.png

      - name: Switch Xcode Version
        run: |
          # find /Applications -maxdepth 2
          sudo xcode-select --switch /Applications/Xcode_16.2.0.app
          xcode-select --print-path

      - name: Setup Godot
        uses: chickensoft-games/setup-godot@v2
        with:
          version: 4.4.1
          use-dotnet: false
          include-templates: true
      - name: Verify setup
        run: |
          xcode-select --print-path
          which godot
          file "$(which godot)"
          uname -a
          godot --version

      - name: Open project for import
        run: |
          cd godot
          godot --headless --import || exit 0

      - name: Export iOS
        run: |
          cd godot
          mkdir -p export/${{ env.PROJECT }}-${{ env.BUILD_TYPE }}
          godot --headless --export-debug ${{ env.BUILD_TYPE }} export/${{ env.PROJECT }}-${{ env.BUILD_TYPE }}/${{ env.BINARY }} --quit || exit 0

      - name: Check export result
        run: |
          cd godot
          find export

      - name: Patch version
        run: |
          agvtool new-marketing-version ${{ env.VERSION }}
          agvtool new-version -all ${{ env.BUILD_NUMBER }}

        working-directory: godot/export/${{ env.PROJECT }}-${{ env.BUILD_TYPE }}/

      - name: List project
        run: |
          cd godot
          xcodebuild -list -project export/${{ env.PROJECT }}-${{ env.BUILD_TYPE }}/${{ env.PROJECT }}.xcodeproj

      - name: Build
        run: |
          cd godot
          xcodebuild \
            -project export/${{ env.PROJECT }}-${{ env.BUILD_TYPE }}/${{ env.PROJECT }}.xcodeproj \
            -sdk iphoneos \
            -scheme "${{ env.PROJECT }}" \
            -configuration "Release" \
            build CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO

      - name: Export Archive
        run: |
          cd godot
          xcodebuild \
            -archivePath "${{ env.PROJECT }}-${{ env.BUILD_TYPE }}.xcarchive" \
            -project export/${{ env.PROJECT }}-${{ env.BUILD_TYPE }}/${{ env.PROJECT }}.xcodeproj \
            -sdk iphoneos \
            -scheme "${{ env.PROJECT }}" \
            -configuration "Release" \
            archive CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO

      - name: Find plist
        run: |
          cd godot
          find . -name "*.plist"

      - name: Upload Archive
        run: |
          cd godot
          mkdir -p ${{ env.PROJECT }}-${{ env.BUILD_TYPE }}
          echo ${{ env.VERSION }} > ${{ env.PROJECT }}-${{ env.BUILD_TYPE }}/version.txt
          echo ${{ env.BUILD_NUMBER }} > ${{ env.PROJECT }}-${{ env.BUILD_TYPE }}/build_number.txt
          mv "${{ env.PROJECT }}-${{ env.BUILD_TYPE }}.xcarchive" "${{ env.PROJECT }}-${{ env.BUILD_TYPE }}"
          tar czvf ${{ env.ARCHIVE_FILE }} "${{ env.PROJECT }}-${{ env.BUILD_TYPE }}"
          aws s3 cp ${{ env.ARCHIVE_FILE }} ${{ env.S3_ARCHIVE_FILE }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "eu-west-1"

      - name: Create latest reference
        run: |
          echo ${{ env.LATEST_CONTENT }} > ${{ env.LATEST_FILE }}
          aws s3 cp ${{ env.LATEST_FILE }} ${{ env.S3_LATEST_FILE }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "eu-west-1"

      - name: Create Summary
        if: always()
        run: |
          {
            echo "|                     |                                    |"
            echo "| :------------------ | ---------------------------------: |"
            echo "| COMMIT_HASH         | ${{ env.COMMIT_HASH }}             |"
            echo "| COMMIT_DATE         | ${{ env.COMMIT_DATE }}             |"
            echo "| ARCHIVE_FILE        | ${{ env.ARCHIVE_FILE }}            |"
            echo "| BUILD_TYPE          | ${{ env.BUILD_TYPE }}              |"
            echo "| BINARY              | ${{ env.BINARY }}                  |"
            echo "| LATEST_FILE         | ${{ env.LATEST_FILE }}             |"
            echo "| S3_ARCHIVE_FILE     | \`${{ env.S3_ARCHIVE_FILE }}\`     |"
            echo "| S3_LATEST_FILE      | \`${{ env.S3_LATEST_FILE }}\`      |"
            echo "| VERSION             | \`${{ env.VERSION }}\`             |"
            echo "| BUILD_NUMBER        | \`${{ env.BUILD_NUMBER }}\`        |" 
          } >> "$GITHUB_STEP_SUMMARY"

